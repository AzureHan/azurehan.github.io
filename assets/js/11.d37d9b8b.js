(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{176:function(s,t,a){"use strict";a.r(t);var n=a(0),_=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"mysql-笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-笔记","aria-hidden":"true"}},[s._v("#")]),s._v(" MySQL 笔记")]),s._v(" "),a("h2",{attrs:{id:"查询执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询执行过程","aria-hidden":"true"}},[s._v("#")]),s._v(" 查询执行过程")]),s._v(" "),a("ol",[a("li",[s._v("客户端向 MySQL 服务器发送一条查询请求")]),s._v(" "),a("li",[s._v("服务器首先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果，否则进入下一阶段")]),s._v(" "),a("li",[s._v("服务器进行 SQL 解析、预处理、再由优化器生成对应的执行计划")]),s._v(" "),a("li",[s._v("MySQL 根据执行计划，调用存储引擎的 API 来执行查询")]),s._v(" "),a("li",[s._v("将结果返回给客户端，同时缓存查询结果")])]),s._v(" "),a("h2",{attrs:{id:"设计使用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计使用技巧","aria-hidden":"true"}},[s._v("#")]),s._v(" 设计使用技巧")]),s._v(" "),a("ul",[a("li",[s._v("使用合理的字段属性长度")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("ENUM")]),s._v(" 或 "),a("code",[s._v("CHAR")]),s._v(" 而不是 "),a("code",[s._v("VARCHAR")])]),s._v(" "),a("li",[s._v("尽可能的使用 "),a("code",[s._v("NOT NULL")])]),s._v(" "),a("li",[s._v("固定长度的表会更快")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("LIMIT")]),s._v(" 限定行数")]),s._v(" "),a("li",[s._v("始终指定你需要的列而不是 "),a("code",[s._v("SELECT *")])]),s._v(" "),a("li",[s._v("拆分大的 "),a("code",[s._v("DELETE")]),s._v(" 或 "),a("code",[s._v("INSERT")]),s._v(" 语句")]),s._v(" "),a("li",[s._v("使用连接 ( JOIN ) 来代替子查询 ( Sub-Queries )")]),s._v(" "),a("li",[s._v("在大数据场景下，表与表之间通过一个冗余字段来关联，要比直接使用 "),a("code",[s._v("JOIN")]),s._v(" 有更好的性能")]),s._v(" "),a("li",[s._v("多个范围条件无法同时使用多个索引")])]),s._v(" "),a("h2",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引","aria-hidden":"true"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),a("h3",{attrs:{id:"组合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合索引","aria-hidden":"true"}},[s._v("#")]),s._v(" 组合索引")]),s._v(" "),a("p",[s._v("当出现多个列做相交操作时（多个AND条件），通常来说一个包含所有相关列的索引要优于多个独立索引。包含的列遵循最左匹配原则。")]),s._v(" "),a("h3",{attrs:{id:"覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引","aria-hidden":"true"}},[s._v("#")]),s._v(" 覆盖索引")]),s._v(" "),a("p",[s._v("如果一个索引包含或者说覆盖所有需要查询的字段的值，那么就没有必要再回表查询，可以极大的提高性能。")]),s._v(" "),a("p",[s._v("以下是覆盖索引的优点")]),s._v(" "),a("ul",[a("li",[s._v("索引条目远小于数据行大小，如果只读取索引，极大减少数据访问量")]),s._v(" "),a("li",[s._v("索引是有按照列值顺序存储的，对于 IO 密集型的范围查询要比随机从磁盘读取每一行数据的 IO 要少的多")])]),s._v(" "),a("h3",{attrs:{id:"前缀索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引","aria-hidden":"true"}},[s._v("#")]),s._v(" 前缀索引")]),s._v(" "),a("p",[s._v("如果字段的类型很长，通常可以索引开始的部分字符，这样可以有效节约索引空间，从而提高索引效率。")]),s._v(" "),a("h3",{attrs:{id:"索引排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引排序","aria-hidden":"true"}},[s._v("#")]),s._v(" 索引排序")]),s._v(" "),a("p",[s._v("MySQL 有两种方式可以生产有序的结果集，其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的。如果 EXPLAIN 的结果中 type 列的值为 index 表示使用了索引扫描来做排序。")]),s._v(" "),a("p",[s._v("在设计索引时，如果一个索引既能够满足排序，又满足查询，是最好的。")]),s._v(" "),a("h3",{attrs:{id:"聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引","aria-hidden":"true"}},[s._v("#")]),s._v(" 聚集索引")]),s._v(" "),a("p",[s._v("聚集索引既存储了索引 , 也存储了行值 . 表数据按照索引的顺序来存储的 , 也就是说索引项的顺序与表中记录的物理顺序一致 . 对于聚集索引 , 叶子结点即存储了真实的数据行 , 不再有另外单独的数据页 .  在一张表上最多只能创建一个聚集索引 , 因为真实数据的物理顺序只能有一种 .")]),s._v(" "),a("h3",{attrs:{id:"主键与唯一索引的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键与唯一索引的区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 主键与唯一索引的区别")]),s._v(" "),a("ul",[a("li",[s._v("主键创建后包含一个唯一性索引")]),s._v(" "),a("li",[s._v("主键可以被其他表引用为外键")]),s._v(" "),a("li",[s._v("主键是一种约束 , 唯一索引是一种索引 , 两者在本质上是不同的")]),s._v(" "),a("li",[s._v("主键列不允许为空值 , 而唯一性索引列允许空值")]),s._v(" "),a("li",[s._v("一个表最多只能创建一个主键 , 唯一索引可以创建多个")])]),s._v(" "),a("h2",{attrs:{id:"解决慢查询-slow-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决慢查询-slow-query","aria-hidden":"true"}},[s._v("#")]),s._v(" 解决慢查询 ( slow query )")]),s._v(" "),a("h3",{attrs:{id:"慢查询日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢查询日志","aria-hidden":"true"}},[s._v("#")]),s._v(" 慢查询日志")]),s._v(" "),a("p",[s._v("在 MySQL 配置文件中找到慢查询日志的文件路径，查询时间大于设置时间的 SQL 将记录到慢查询日志中。")]),s._v(" "),a("h3",{attrs:{id:"explain-分析-sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain-分析-sql","aria-hidden":"true"}},[s._v("#")]),s._v(" EXPLAIN 分析 SQL")]),s._v(" "),a("p",[s._v("使用 EXPLAIN 关键字可以模拟优化器执行 SQL 查询语句，从而知道 MySQL 是如何处理 SQL 语句的。这可以帮助分析你的查询语句或是表结构的性能瓶颈。")]),s._v(" "),a("p",[s._v("以下信息可以通过 EXPLAIN 命令得到")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("id")]),s._v(" 表的读取顺序")]),s._v(" "),a("li",[a("code",[s._v("select_type")]),s._v(" 数据读取操作的操作类型")]),s._v(" "),a("li",[a("code",[s._v("table")]),s._v(" 对应的数据表名称")]),s._v(" "),a("li",[a("code",[s._v("type")])]),s._v(" "),a("li",[a("code",[s._v("possible_keys")]),s._v(" 哪些索引可以使用")]),s._v(" "),a("li",[a("code",[s._v("key")]),s._v(" 哪些索引被实际使用")]),s._v(" "),a("li",[a("code",[s._v("ref")]),s._v(" 表之间的引用")]),s._v(" "),a("li",[a("code",[s._v("rows")]),s._v(" 每张表有多少行被优化器查询")]),s._v(" "),a("li",[a("code",[s._v("extra")]),s._v(" 使用信息")])]),s._v(" "),a("h2",{attrs:{id:"数据引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据引擎","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据引擎")]),s._v(" "),a("h3",{attrs:{id:"如何选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何选择","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何选择")]),s._v(" "),a("ol",[a("li",[s._v("MySQL5.5 版本开始 InnoDB 已经成为 MySQL 的默认引擎( 之前是 MyISAM )，说明其优势是有目共睹的，如果你不知道用什么，那就用 InnoDB，至少不会差")]),s._v(" "),a("li",[s._v("是否要支持事务，如果要请选择 InnoDB ，如果不需要可以考虑 MyISAM")]),s._v(" "),a("li",[s._v("如果表中绝大多数都只是读查询，可以考虑 MyISAM，如果既有读写也挺频繁，请使用 InnoDB")])]),s._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("ol",[a("li",[s._v("InnoDB 所有的表都保存在同一个数据文件中；MyISAM 将表结构，表索引，表数据分为三个文件储存。")]),s._v(" "),a("li",[s._v("InnoDB 支持事务， MyISAM 不支持，对于 InnoDB 每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条 SQL 语言放在 begin 和 commit 之间，组成一个事务")]),s._v(" "),a("li",[s._v("InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MyISAM 会失败")]),s._v(" "),a("li",[s._v("InnoDB 是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的")]),s._v(" "),a("li",[s._v("InnoDB 不保存表的具体行数，执行 "),a("code",[s._v("select count(*) from table")]),s._v(" 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快")]),s._v(" "),a("li",[s._v("InnoDB 支持行级锁，但需要在明确主键的情况下")])]),s._v(" "),a("h2",{attrs:{id:"锁机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁机制","aria-hidden":"true"}},[s._v("#")]),s._v(" 锁机制")]),s._v(" "),a("h2",{attrs:{id:"尽量避免-null-字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尽量避免-null-字段","aria-hidden":"true"}},[s._v("#")]),s._v(" 尽量避免 "),a("code",[s._v("null")]),s._v(" 字段")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" users"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),a("span",{attrs:{class:"token keyword"}},[s._v("VARCHAR")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("80")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Alice'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Barbie'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Donna'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Eliza'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Frances'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Greer'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" vip"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),a("span",{attrs:{class:"token keyword"}},[s._v("VARCHAR")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("80")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" vip "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" vip "),a("span",{attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" NAME_IDX"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" vip "),a("span",{attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" NAME_IDX"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" vip "),a("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Christiana'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}],!1,null,null,null);_.options.__file="README.md";t.default=_.exports}}]);