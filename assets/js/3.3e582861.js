(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{184:function(t,_,v){"use strict";v.r(_);var r=v(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"算法复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法复杂度")]),t._v(" "),v("p",[t._v("大 O 符号（Big O notation），又称为渐进符号。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（Asymptotic Time Complexity），简称时间复杂度。")]),t._v(" "),v("h3",{attrs:{id:"时间复杂度分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度分析")]),t._v(" "),v("p",[t._v("大 O 复杂度表示法表示变化趋势，通常忽略掉公式中的常量、低阶、系数，只记录一个最大阶的量级。")]),t._v(" "),v("ol",[v("li",[t._v("加法法则：总复杂度等于"),v("strong",[t._v("量级最大")]),t._v("的那段代码的复杂度")]),t._v(" "),v("li",[t._v("乘法法则："),v("strong",[t._v("嵌套代码")]),t._v("的复杂度等于嵌套内外代码复杂度的乘积")])]),t._v(" "),v("p",[t._v("当代码 "),v("code",[t._v("f(n,m)")]),t._v(" 的复杂度由两个数据组成，加法法则则不适用，表示为 O(n+m)。")]),t._v(" "),v("p",[t._v("常见的复杂度量级（由低到高）：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("渐进复杂度")]),t._v(" "),v("th",[t._v("多项式量级")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("常量阶")]),t._v(" "),v("td",[t._v("O(1)")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("对数阶")]),t._v(" "),v("td",[t._v("O(logn)")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("线性阶")]),t._v(" "),v("td",[t._v("O(n)")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("线性对数阶")]),t._v(" "),v("td",[t._v("O(nlogn)")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("次方阶")]),t._v(" "),v("td",[t._v("O(n^k)")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("指数阶")]),t._v(" "),v("td",[t._v("O(2^n)")]),t._v(" "),v("td",[t._v("否")])]),t._v(" "),v("tr",[v("td",[t._v("阶乘阶")]),t._v(" "),v("td",[t._v("O(n!)")]),t._v(" "),v("td",[t._v("否")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。")])]),t._v(" "),v("h4",{attrs:{id:"最好、最坏、平均时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最好、最坏、平均时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 最好、最坏、平均时间复杂度")]),t._v(" "),v("p",[t._v("大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况，只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。")]),t._v(" "),v("h4",{attrs:{id:"均摊时间负责度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#均摊时间负责度","aria-hidden":"true"}},[t._v("#")]),t._v(" 均摊时间负责度")]),t._v(" "),v("p",[t._v("算法只有极端情况下复杂度高，一般情况复杂度低，那么极端情况下的复杂度可以分摊到一般情况下。")])])}],!1,null,null,null);a.options.__file="Algorithmic-Complexity.md";_.default=a.exports}}]);