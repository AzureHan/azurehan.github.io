(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{188:function(t,e,_){"use strict";_.r(e);var r=_(0),i=Object(r.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),_("p",[t._v("实现单一的功能的设计原则，常见于 PHP 程序中的 MVC 设计模型，其中每个模块负责它的功能。对于类而言，应该专注在一种逻辑上。在程序设计中应该要做的是让辅助一个类的其他逻辑打包到外部，然后调入其中。SRP 与 ISP 某程度上相似，但前者针对的是具体实现，后者是接口。在 Laravel 中，不好的例子是在愈发庞大的系统中，Model 文件往往越发臃肿且杂乱。因为 Model 中包含数据库访问、Model 间关系、Laravel 的 Model 接口、定义在 Model 自身的逻辑等等，这让代码难以维护。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),_("p",[t._v('"设计应该对扩展开放但对修改关闭" 意思是某段代码始终应该不被修改，如果需要考虑到这段代码可以被扩展其能力，那么这段代码 ( 通常 ) 应该设计成抽象其依赖，由其依赖负责实现。')]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),_("p",[t._v("如果你有一个类和其一个子类，在不改变原有结果正确性的前提下父类和子类可以互换，而你无须了解这个变化。在面向对象设计中一个违反 LSP 的典型例子是 Square ( 正方形 ) 类派生于 Rectangle ( 长方形 ) 类，长方形有『 长 』和『 宽 』，而正方形只有『 边长 』。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),_("p",[t._v("抽象的设计应该相对明确，人和机器人都可以进行工作。而人需要『 进食 』，机器人需要『 充电 』，因此让机器人继承人是不正确的。")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),_("ol",[_("li",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000015615106",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP面向对象设计五大原则（SOLID）梳理总结"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://laravel-china.org/articles/4160/solid-notes-on-object-oriented-design-and-programming-oodoop",target:"_blank",rel:"noopener noreferrer"}},[t._v("S.O.L.I.D 面向对象设计和编程（OOD&OOP）笔记"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000011662984",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP代码简洁之道——SOLID原则"),_("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"php-面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php-面向对象","aria-hidden":"true"}},[this._v("#")]),this._v(" PHP 面向对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1-s-o-l-i-d-面向对象设计与编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-s-o-l-i-d-面向对象设计与编程","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. S.O.L.I.D 面向对象设计与编程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("S.O.L.I.D 是 "),e("strong",[this._v("面向对象设计")]),this._v(" 和 "),e("strong",[this._v("面试对象编程")]),this._v(" 的五个基本原则，应用这五个原则能创建一个易于维护和扩展的软件系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("S.O.L.I.D 可以指导代码重构和在迭代的过程中进行代码清扫，以使得软件源代码清晰可读和具有良好的扩展性。在测试驱动开发中是典型应用场景，并且也是敏捷开发和自适应软件开发基本原则的重要组成部分。")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("缩写")]),t._v(" "),_("th",[t._v("英文")]),t._v(" "),_("th",[t._v("中文")]),t._v(" "),_("th",[t._v("概念")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("S")]),t._v(" "),_("td",[t._v("Single Responsibility Principle")]),t._v(" "),_("td",[t._v("单一职责原则")]),t._v(" "),_("td",[t._v("对象应该只负责一种功能的实现")])]),t._v(" "),_("tr",[_("td",[t._v("O")]),t._v(" "),_("td",[t._v("Opened Closed Principle")]),t._v(" "),_("td",[t._v("开闭原则")]),t._v(" "),_("td",[t._v("设计应该对扩展开放但对修改关闭")])]),t._v(" "),_("tr",[_("td",[t._v("L")]),t._v(" "),_("td",[t._v("Liskov Substitution Principle")]),t._v(" "),_("td",[t._v("里氏替换原则")]),t._v(" "),_("td",[t._v("程序的对象可被继承者替换并保持正常")])]),t._v(" "),_("tr",[_("td",[t._v("I")]),t._v(" "),_("td",[t._v("Interface Segregation Principle")]),t._v(" "),_("td",[t._v("接口隔离原则")]),t._v(" "),_("td",[t._v("调用者不需要依赖实现多余接口")])]),t._v(" "),_("tr",[_("td",[t._v("D")]),t._v(" "),_("td",[t._v("Dependence Inversion Principle")]),t._v(" "),_("td",[t._v("依赖反转原则")]),t._v(" "),_("td",[t._v("附加功能应由外部注入而不是内部实现")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-1-单一职责原则-srp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单一职责原则-srp","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1 单一职责原则 ( SRP )")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("引起类变化的因素永远不要多于一个，也就是说一个类有且只有一个职责。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-1-1-定义-特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-定义-特性","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1.1 定义 / 特性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("仅有一个引起类变化的原因")]),this._v(" "),e("li",[this._v("一个类只承担一项职责")]),this._v(" "),e("li",[this._v("避免相同的职责分散到不同的类，功能重复")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-1-2-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1.2 问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("一个类承担的职责过多，多个职责间相互依赖，一个职责的变换会影响这个类完成其他职责的能力，当引起类变化的原因发生时，会遭受到意想不到的破坏")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-1-3-优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1.3 优势")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[_("strong",[t._v("减少类之间的耦合")])]),t._v(" "),_("p",[t._v("当需求变化时，只修改一个类，从而隔离了变化带来类对其他职责的影响")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("提高类的复用性")])]),t._v(" "),_("p",[t._v("按需引用，一个类负责一个职责，需求的变动只需要修改对应的类或增加某一职责")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("降低类的复杂度")])]),t._v(" "),_("p",[t._v("职责单一，功能分散开降低一个类多个职责类的复杂度")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-2-开闭原则-ocp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-开闭原则-ocp","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2 开闭原则 ( OCP )")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v('正如 Bertrand Meyer 所述 "软件的实体（类, 模块, 函数,等）应该对扩展开放，对修改关闭。" 的这个原则是在说明应该允许用户在不改变已有代码的情况下增加新的功能。')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("通常可以通过依赖关系抽象实现开闭原则，比如 interface ( 接口 )  或 abstract ( 抽象类 ) 而不是具体类，通过创建新的类实现它们来增加功能。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-1-定义-特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-定义-特性","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.1 定义 / 特性")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[_("strong",[t._v("一个模块在扩展行为方面应该是开放的")])]),t._v(" "),_("p",[t._v("扩展行为 : 更替或增加模块能力")]),t._v(" "),_("p",[t._v("开放的 : 『 公共 』的属性")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("一个模块在修改行为方面应该是封闭的")])]),t._v(" "),_("p",[t._v("修改行为 : 从『 私有 』逻辑扩展")]),t._v(" "),_("p",[t._v("封闭的 : 固定已有的逻辑")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-2-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.2 问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("随着系统规模的不断扩大，系统的维护和修改的复杂性不断提高，系统一处的更改往往会影响到其他模块。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-3-优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.3 优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("模块的行为是可扩展的，可以方便的对现有模块的 行为 / 功能 进行扩展")]),this._v(" "),e("li",[this._v("对于模块行为的扩展 不会 / 较小 的影响现有 系统 / 模块")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-3-里氏替换原则-lsp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-里氏替换原则-lsp","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.3 里氏替换原则 ( LSP )")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("LSP 是 OCP 得以应用的最主要的原则之一，正是因为子类性的可替换行是的基类类型在无需修改的情况下扩展功能。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-3-1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.3.1 定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("一个子类的实例应该能够替换任何其父类的实例")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-3-2-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.3.2 问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果没有 LSP 类继承就会混乱")]),this._v(" "),e("li",[this._v("如果子类作为一个参数传递给方法将会出现未知行为")]),this._v(" "),e("li",[this._v("如果没有 LSP 适用与基类的单元测试将不能成功用于测试子类")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-3-3-优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.3.3 优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("能够判断抽象的类设计得是否 正确 / 严谨")]),this._v(" "),e("li",[this._v("调用者只需要确保依赖于最顶层父类抽象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-4-接口隔离原则-isp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-接口隔离原则-isp","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.4 接口隔离原则 ( ISP )")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("不要强迫客户端 ( 泛指调用者 ) 去实现那些他们不需要的接口")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("当我们使用非内聚的接口时，ISP 指导我们创建多个较小的高内聚接口。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-4-1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.4.1 定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("不应该强迫客户端依赖与他们不需要的 方法 / 功能")]),this._v(" "),e("li",[this._v("一个类对一个类的依赖应该建立在『 最小 』的接口上")]),this._v(" "),e("li",[this._v("接口的实现类应该只呈现为单一职责原则")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-4-2-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.4.2 问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当系统成型，不遵守 ISP 的『 随意 』修改接口将导致很多不需要此次修改的功能的类都要实现此方法，然而这样毫无意义。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-4-3-优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.4.3 优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『 高内聚 』")]),this._v(" "),e("li",[this._v("『 低耦合 』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-5-依赖反转原则-dip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-依赖反转原则-dip","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.5 依赖反转原则 ( DIP )")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v('"你会将一个灯直接焊接到墙上的电路吗 ？"')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-5-1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.5.1 定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("高层模块不应该依赖底层模块，两者都应该依赖其抽象")]),this._v(" "),e("li",[this._v("抽象不应该依赖于细节，细节应该依赖于抽象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-5-2-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.5.2 问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("假如电灯直接焊接在电路上，需要更换就非常需要功夫了，甚至还要花钱请电工。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-5-3-优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.5.3 优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『 高内聚 』")]),this._v(" "),e("li",[this._v("『 低耦合 』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_2-设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-设计模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 设计模式")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("设计模式")]),t._v(" "),_("th",[t._v("简要介绍")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("工厂模式")]),t._v(" "),_("td",[t._v("由工厂类的方法创建对象，程序调用对应的方法获取新对象。")])]),t._v(" "),_("tr",[_("td",[t._v("注册器模式")]),t._v(" "),_("td",[t._v("程序将对象绑定到一个键名下，需要时再根据键名获取对象。")])]),t._v(" "),_("tr",[_("td",[t._v("单例模式")]),t._v(" "),_("td",[t._v("一个类只允许实例化一次。将实例存储在类的静态变量中，在实例化时直接返回。")])]),t._v(" "),_("tr",[_("td",[t._v("适配器模式")]),t._v(" "),_("td",[t._v("对一些具有相同接口的类进行封装，程序通过代理调用无需自行适配。")])]),t._v(" "),_("tr",[_("td",[t._v("策略模式")]),t._v(" "),_("td",[t._v("抽象业务逻辑成接口，程序依赖抽象，传入不同的对象到程序中即可执行不同的业务逻辑。")])]),t._v(" "),_("tr",[_("td",[t._v("观察者模式")]),t._v(" "),_("td",[t._v("监听对象触发的事件执行不同时态相应的操作。")])]),t._v(" "),_("tr",[_("td",[t._v("数据-对象 映射模式")]),t._v(" "),_("td",[t._v("将对象属性与数据库绑定，修改对象的属性相应改写数据库。")])]),t._v(" "),_("tr",[_("td",[t._v("原型模式")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("装饰器模式")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("迭代器模式")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("代理模式")]),t._v(" "),_("td")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_3-参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. 参考")])}],!1,null,null,null);i.options.__file="Object-oriented.md";e.default=i.exports}}]);