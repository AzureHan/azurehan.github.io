(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{173:function(e,t,n){"use strict";n.r(t);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"oauth2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#oauth2","aria-hidden":"true"}},[e._v("#")]),e._v(" OAuth2")]),e._v(" "),n("h2",{attrs:{id:"_1-oauth-概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-oauth-概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. OAuth 概念")]),e._v(" "),n("p",[e._v("OAuth 是一个关于授权 ( Authorization ) 的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。思想的重点在于 "),n("strong",[e._v("用户")]),e._v(" 与 "),n("strong",[e._v("服务提供商")]),e._v(" ，"),n("strong",[e._v("客户端")]),e._v(" 其次。还有 "),n("strong",[e._v('"获取资源者"')]),e._v(" 需要用户 "),n("strong",[e._v("授权")]),e._v(" 、获取资源时需要使用 "),n("strong",[e._v("令牌")]),e._v("。")]),e._v(" "),n("p",[e._v("OAuth 主要由以下角色组成 :")]),e._v(" "),n("ul",[n("li",[e._v("Resource Owner ( 用户 )")]),e._v(" "),n("li",[e._v("User Agent ( 浏览器 )")]),e._v(" "),n("li",[e._v("Client ( 客户端 )")]),e._v(" "),n("li",[e._v("Resource Server ( 资源服务器 )")]),e._v(" "),n("li",[e._v("Authorization Server ( 授权服务器 )")])]),e._v(" "),n("p",[e._v("用户通过浏览器访问客户端 ( 对于所依赖的资源提供方来说 ) ，如果需要调取资源服务器的资源，则需要到授权服务器上由用户本人登录，加入用户同意后则给予客户端授权，客户端才向授权服务器获取令牌，之客户端后可以凭令牌在资源服务器上使用资源。")]),e._v(" "),n("h2",{attrs:{id:"_2-授权模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-授权模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 授权模式")]),e._v(" "),n("p",[e._v("OAuth 2.0 授权模式有四种 :")]),e._v(" "),n("ol",[n("li",[e._v("Authorization Code Grant ( 授权码授予 )")]),e._v(" "),n("li",[e._v("Implicit Grant ( 隐式授予 )")]),e._v(" "),n("li",[e._v("Resource Owner Password Credentials Grant ( 用户密码授予 )")]),e._v(" "),n("li",[e._v("Client Credentials Grant ( 客户端授予 )")])]),e._v(" "),n("h3",{attrs:{id:"_2-1-authorization-code-grant-授权码授予"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-authorization-code-grant-授权码授予","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1 Authorization Code Grant ( 授权码授予 )")]),e._v(" "),n("p",[e._v("意义上最严谨的模式，分为 用户、服务提供商 和 客户端 三方，并且客户端需要有后端 ( Endpoint ) 辅助。过程中的 得到授权码 和 获取用户令牌 的部分是在 服务提供商 和 客户端 双方的后端处理，不会对外 ( 包括用户 ) 暴露。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("+----------+\n| Resource |\n|   Owner  |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier      +---------------+\n|         -+----(A)-- & Redirection URI ----\x3e|               |\n|  User-   |                                 | Authorization |\n|  Agent  -+----(B)-- User authenticates ---\x3e|     Server    |\n|          |                                 |               |\n|         -+----(C)-- Authorization Code ---<|               |\n+-|----|---+                                 +---------------+\n  |    |                                         ^      v\n (A)  (C)                                        |      |\n  |    |                                         |      |\n  ^    v                                         |      |\n+---------+                                      |      |\n|         |>---(D)-- Authorization Code ---------'      |\n|  Client |          & Redirection URI                  |\n|         |                                             |\n|         |<---(E)----- Access Token -------------------'\n+---------+       (w/ Optional Refresh Token)\n")])])]),n("p",[e._v("流程图步骤详解 :")]),e._v(" "),n("p",[e._v("( 步骤 A ) 客户端需要依赖用户在的服务提供商的资源，而获取用户的资源需要持有令牌，但在获取令牌之前需要用户在服务提供商上 ( 登录并 ) 给予客户端授权，因此客户端通过浏览器 GET 请求服务提供商的授权服务器 ；GET 请求中包含 客户端的身份标识 和 客户端的后端回调地址 ( 在像服务提供商申请客户端时的地址 ) 。")]),e._v(" "),n("p",[e._v("( 步骤 B ) 用户在浏览器上选择是否给予客户端授权。")]),e._v(" "),n("p",[e._v('( 步骤 C ) 授权服务器携带用户的选择结果 ( 同意 或 拒绝 ) POST 请求授权服务器自身进行处理 ，然后 ( 于 URI 查询字符串中 ) 携带处理结果 ( 授权码 或 拒绝信息 ) 将浏览器重定向 ( HTTP 302 ) 到 客户端的后端回调地址 ；浏览器将授权结果"转交"给 客户端的后端。')]),e._v(" "),n("p",[e._v("( 步骤转折点 ) 处理假如用户拒绝的业务逻辑，也不会有后面的步骤。")]),e._v(" "),n("p",[e._v("( 步骤 D ) 客户端的后端在内部通过 HTTP 请求 ( 包含 客户端的身份标识、密钥 和 授权码 ) 获取用户的令牌。")]),e._v(" "),n("p",[e._v("( 步骤 E ) 客户端的后端得到用户的令牌。")]),e._v(" "),n("p",[e._v("( 后续的步骤 ) 客户端的后端使用用户的令牌获取资源服务器上的资源，资源处理以后最终响应浏览器，用户看到结果。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-implicit-grant-隐式授予"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-implicit-grant-隐式授予","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2 Implicit Grant ( 隐式授予 )")]),e._v(" "),n("p",[e._v("OAuth2 隐式授权是规范中安全疑虑最多的授权方式。隐式授予是针对客户端是 Native APP 设计的，因为 Native APP 可能没有架设在公网上的后端服务器，因而无法实现授权码授予。客户端获取的用户令牌是直接放置在 URI 中暴露出来，同时也不会获取到将刷新令牌。单纯的 Native APP 无法监听授权服务器的重定向，所以需要内建服务器 ( Web-Hosted Client Resource ) 来监听重定向，才能提取出用户令牌。")]),e._v(" "),n("blockquote",[n("p",[e._v("因为不懂 Native APP 的编程，所以可能理解不对。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier     +---------------+\n|         -+----(A)-- & Redirection URI ---\x3e|               |\n|  User-   |                                | Authorization |\n|  Agent  -|----(B)-- User authenticates --\x3e|     Server    |\n|          |                                |               |\n|          |<---(C)--- Redirection URI ----<|               |\n|          |          with Access Token     +---------------+\n|          |            in Fragment\n|          |                                +---------------+\n|          |----(D)--- Redirection URI ----\x3e|   Web-Hosted  |\n|          |          without Fragment      |     Client    |\n|          |                                |    Resource   |\n|     (F)  |<---(E)------- Script ---------<|               |\n|          |                                +---------------+\n+-|--------+\n  |    |\n (A)  (G) Access Token\n  |    |\n  ^    v\n+---------+\n|         |\n|  Client |\n|         |\n+---------+\n")])])]),n("p",[e._v("流程图步骤详解 :")]),e._v(" "),n("p",[e._v("( 步骤 A ) 客户端需要依赖用户在的服务提供商的资源，而获取用户的资源需要持有令牌，但在获取令牌之前需要用户在服务提供商上 ( 登录并 ) 给予客户端授权，因此客户端通过浏览器 GET 请求服务提供商的授权服务器 ；GET 请求中包含 客户端的身份标识 和 客户端的后端回调地址 ( 在像服务提供商申请客户端时的地址 ) 。")]),e._v(" "),n("p",[e._v("( 步骤 B ) 用户在浏览器上选择是否给予客户端授权。")]),e._v(" "),n("p",[e._v("( 步骤 C ) 授权服务器携带用户的选择结果 ( 同意 或 拒绝 ) POST 请求授权服务器自身进行处理 ，然后 ( 于 URI 片段标识符中 ) 携带处理结果 ( 授权码 或 拒绝信息 ) 将浏览器重定向 ( HTTP 302 ) 到 客户端 ( 内建 ) 的后端 ( 即 Web-Hosted Client Resource ) 回调地址。")]),e._v(" "),n("p",[e._v("( 步骤 D ) 浏览器浏览器重定向到客户端的后端。")]),e._v(" "),n("p",[e._v("( 步骤 E ) 客户端的后端提供 ( 响应 ) 脚本给浏览器。")]),e._v(" "),n("p",[e._v("( 步骤 F ) 浏览器运行脚本提取用户令牌。")]),e._v(" "),n("p",[e._v("( 步骤 G ) 浏览器传递用户令牌到客户端中。")]),e._v(" "),n("h3",{attrs:{id:"_2-3-resource-owner-password-credentials-grant-用户密码授予"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-resource-owner-password-credentials-grant-用户密码授予","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3 Resource Owner Password Credentials Grant ( 用户密码授予 )")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     v\n     |    Resource Owner\n    (A) Password Credentials\n     |\n     v\n+---------+                                  +---------------+\n|         |>--(B)---- Resource Owner -------\x3e|               |\n|         |         Password Credentials     | Authorization |\n| Client  |                                  |     Server    |\n|         |<--(C)---- Access Token ---------<|               |\n|         |    (w/ Optional Refresh Token)   |               |\n+---------+                                  +---------------+\n")])])]),n("h3",{attrs:{id:"_2-4-client-credentials-grant-客户端授予"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-client-credentials-grant-客户端授予","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.4 Client Credentials Grant ( 客户端授予 )")])])}],!1,null,null,null);a.options.__file="OAuth2.md";t.default=a.exports}}]);